# dashboard.py
import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import altair as alt # Th∆∞ vi·ªán v·∫Ω bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c t·ªët v·ªõi Streamlit

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Dashboard D·ª± ƒëo√°n Churn",
    page_icon="üìä",
    layout="wide" # S·ª≠ d·ª•ng layout r·ªông h∆°n
)

# --- H√†m t·∫£i d·ªØ li·ªáu (cache ƒë·ªÉ tƒÉng t·ªëc) ---
@st.cache_data # Cache d·ªØ li·ªáu ƒë·ªÉ kh√¥ng ph·∫£i ƒë·ªçc l·∫°i file m·ªói l·∫ßn t∆∞∆°ng t√°c
def load_data(file_path: Path) -> pd.DataFrame:
    """T·∫£i d·ªØ li·ªáu d·ª± ƒëo√°n t·ª´ file CSV."""
    if not file_path.is_file():
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu t·∫°i '{file_path}'. H√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ ch·∫°y stage 'predict'.")
        return None
    try:
        df = pd.read_csv(file_path)
        # ƒê·∫£m b·∫£o c·ªôt x√°c su·∫•t l√† s·ªë
        if 'ChurnProbability' in df.columns:
            df['ChurnProbability'] = pd.to_numeric(df['ChurnProbability'], errors='coerce')
            df.dropna(subset=['ChurnProbability'], inplace=True) # B·ªè c√°c d√≤ng l·ªói n·∫øu c√≥
        else:
            st.error("L·ªói: C·ªôt 'ChurnProbability' kh√¥ng t·ªìn t·∫°i trong file d·ªØ li·ªáu.")
            return None
        return df
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file CSV: {e}")
        return None

# --- T·∫£i d·ªØ li·ªáu ---
DATA_FILE = Path("predictions_on_full_data.csv") # ƒê∆∞·ªùng d·∫´n t·ªõi file k·∫øt qu·∫£ d·ª± ƒëo√°n
df_predictions = load_data(DATA_FILE)

# --- Ti√™u ƒë·ªÅ Dashboard ---
st.title("üìä Dashboard Ph√¢n t√≠ch D·ª± ƒëo√°n Kh√°ch h√†ng R·ªùi b·ªè (Churn)")
st.markdown("Dashboard n√†y hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n churn v√† cho ph√©p kh√°m ph√° d·ªØ li·ªáu.")

# --- Ki·ªÉm tra n·∫øu d·ªØ li·ªáu t·∫£i th√†nh c√¥ng ---
if df_predictions is not None:

    # --- Sidebar cho b·ªô l·ªçc ---
    st.sidebar.header("B·ªô l·ªçc D·ªØ li·ªáu")

    # B·ªô l·ªçc theo x√°c su·∫•t Churn
    min_prob, max_prob = float(df_predictions['ChurnProbability'].min()), float(df_predictions['ChurnProbability'].max())
    # S·ª≠ d·ª•ng slider ƒë·ªÉ ch·ªçn kho·∫£ng x√°c su·∫•t
    prob_range = st.sidebar.slider(
        "Ch·ªçn kho·∫£ng X√°c su·∫•t Churn:",
        min_value=min_prob,
        max_value=max_prob,
        value=(min_prob, max_prob), # Gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† to√†n b·ªô kho·∫£ng
        step=0.01, # B∆∞·ªõc nh·∫£y 0.01
        format="%.2f" # Hi·ªÉn th·ªã 2 ch·ªØ s·ªë th·∫≠p ph√¢n
    )

    # B·ªô l·ªçc theo c√°c ƒë·∫∑c ƒëi·ªÉm kh√°c (V√≠ d·ª•: Contract)
    # L·∫•y c√°c gi√° tr·ªã duy nh·∫•t, b·ªè qua NaN n·∫øu c√≥
    contract_types = ['T·∫•t c·∫£'] + df_predictions['Contract'].dropna().unique().tolist()
    selected_contract = st.sidebar.selectbox(
        "Ch·ªçn Lo·∫°i H·ª£p ƒë·ªìng:",
        options=contract_types,
        index=0 # M·∫∑c ƒë·ªãnh ch·ªçn 'T·∫•t c·∫£'
    )

    # --- L·ªçc d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn ---
    df_filtered = df_predictions[
        (df_predictions['ChurnProbability'] >= prob_range[0]) &
        (df_predictions['ChurnProbability'] <= prob_range[1])
    ]
    # √Åp d·ª•ng b·ªô l·ªçc h·ª£p ƒë·ªìng n·∫øu kh√¥ng ph·∫£i 'T·∫•t c·∫£'
    if selected_contract != 'T·∫•t c·∫£':
        df_filtered = df_filtered[df_filtered['Contract'] == selected_contract]

    # --- Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan ---
    st.header("T·ªïng quan D·ªØ li·ªáu ƒë√£ l·ªçc")
    total_customers = df_filtered.shape[0]
    avg_churn_prob = df_filtered['ChurnProbability'].mean() if total_customers > 0 else 0

    col1, col2 = st.columns(2) # T·∫°o 2 c·ªôt
    with col1:
        st.metric("S·ªë l∆∞·ª£ng Kh√°ch h√†ng", f"{total_customers:,}") # ƒê·ªãnh d·∫°ng s·ªë
    with col2:
        st.metric("X√°c su·∫•t Churn Trung b√¨nh", f"{avg_churn_prob:.3f}")

    # --- Bi·ªÉu ƒë·ªì Ph√¢n ph·ªëi X√°c su·∫•t Churn ---
    st.header("Ph√¢n ph·ªëi X√°c su·∫•t Churn")
    if total_customers > 0:
        # S·ª≠ d·ª•ng Altair ƒë·ªÉ v·∫Ω histogram t∆∞∆°ng t√°c
        hist_chart = alt.Chart(df_filtered).mark_bar().encode(
            alt.X("ChurnProbability", bin=alt.Bin(maxbins=30), title="X√°c su·∫•t Churn"), # Chia th√†nh 30 kho·∫£ng
            alt.Y('count()', title="S·ªë l∆∞·ª£ng Kh√°ch h√†ng"),
            tooltip=[alt.X("ChurnProbability", bin=alt.Bin(maxbins=30)), 'count()'] # Hi·ªÉn th·ªã tooltip khi di chu·ªôt
        ).properties(
            title='Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi X√°c su·∫•t Churn c·ªßa Kh√°ch h√†ng ƒë√£ l·ªçc'
        ).interactive() # Cho ph√©p zoom/pan

        st.altair_chart(hist_chart, use_container_width=True)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.")

    # --- Hi·ªÉn th·ªã B·∫£ng D·ªØ li·ªáu ---
    st.header("Chi ti·∫øt D·ªØ li·ªáu Kh√°ch h√†ng (ƒê√£ l·ªçc)")
    st.markdown("B·∫°n c√≥ th·ªÉ s·∫Øp x·∫øp b·∫£ng b·∫±ng c√°ch nh·∫•p v√†o ti√™u ƒë·ªÅ c·ªôt.")

    # Ch·ªçn c√°c c·ªôt quan tr·ªçng ƒë·ªÉ hi·ªÉn th·ªã (c√≥ th·ªÉ t√πy ch·ªânh)
    columns_to_show = [
        'customerID', 'gender', 'tenure', 'Contract', 'InternetService',
        'MonthlyCharges', 'TotalCharges', 'Churn', 'ChurnProbability'
    ]
    # Ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt t·ªìn t·∫°i trong df_filtered
    columns_to_show = [col for col in columns_to_show if col in df_filtered.columns]

    # Hi·ªÉn th·ªã DataFrame v·ªõi chi·ªÅu cao c·ªë ƒë·ªãnh v√† thanh cu·ªôn
    # L√†m tr√≤n c·ªôt x√°c su·∫•t ƒë·ªÉ d·ªÖ ƒë·ªçc
    st.dataframe(
        df_filtered[columns_to_show].style.format({'ChurnProbability': '{:.4f}'}),
        height=400, # Gi·ªõi h·∫°n chi·ªÅu cao
        use_container_width=True # S·ª≠ d·ª•ng to√†n b·ªô chi·ªÅu r·ªông
    )

    # --- (T√πy ch·ªçn) Th√™m c√°c ph√¢n t√≠ch kh√°c ---
    # V√≠ d·ª•: Ph√¢n t√≠ch top N kh√°ch h√†ng c√≥ nguy c∆° cao nh·∫•t
    st.header("Top Kh√°ch h√†ng c√≥ Nguy c∆° Churn Cao nh·∫•t")
    num_top_customers = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng kh√°ch h√†ng Top N:", 5, 50, 10)
    top_churners = df_filtered.nlargest(num_top_customers, 'ChurnProbability')
    st.dataframe(
        top_churners[columns_to_show].style.format({'ChurnProbability': '{:.4f}'}),
        use_container_width=True
    )

else:
    st.warning("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu d·ª± ƒëo√°n. Vui l√≤ng ch·∫°y pipeline d·ª± ƒëo√°n tr∆∞·ªõc.")

# --- Footer (T√πy ch·ªçn) ---
st.markdown("---")
st.caption("Dashboard t·∫°o b·∫±ng Streamlit cho d·ª± √°n Churn Prediction.")

